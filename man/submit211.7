.\" Manual page for EECS 211 homework submission instructions.
.de sh
.  RS 4
\\fIsh$\\fR \\$*
.  RE
..
.\"
.TH SUBMIT211 7 "January 16, 2019" "Jesse A. Tov"
.\"
.SH "NAME"
submit211 \- EECS 211 homework submission guide
.\"
.SH "INTRODUCTION"
For the first half of the course, EECS 211 homework assignments must be
submitted from your EECS login shell using the
.BR gsc (1)
command, which is a client for the GSC homework server.
This guide describes the steps to submit your homework and check its
status. For more details on using the
.B gsc
command, see its manual page.
.PP
The GSC homework server stores your submitted files for each homework.
It allows you to resubmit as many times as you like until the due date.
There are not separate steps to upload files and to complete your
submission; rather, whatever files you have uploaded as of the due date
are your submission.
.PP
This guide is organized into tasks that you will need to perform once,
and tasks you may need to perform often.
.\"
.SH "ONE-TIME TASK"
.SS "Creating your GSC account"
Before you can submit your homework for the first time, you need to create
an account on the GSC server. Your username \fBmust\fR be the same as
your Northwestern NetID (3 or 4 letters followed by 3 digits) in order
to get credit for work you submit.
.PP
To create your account with username <\fINETID\fR>, run the command
.PP
.sh gsc create \fR<\fINETID\fR>
.PP
For example, if your NetID were ``\fIabc123\fR'', you would run
.PP
.sh gsc create abc123
.PP
The command will prompt you to enter and then confirm a password, after
which it will attempt to create an account with the homework server.
Note that the server may reject a password as too weak. Passwords are
evaluated based on the length and the number of different character
classes (uppercase letter, lowercase letters, digits, and punctuation)
involved. If your password is rejected, try again with something
more complex.
.\"
.SH "COMMON TASKS"
.SS "Logging in"
When you first create your GSC account using the
.BR gsc (1)
command, you will be automatically logged into the server as well.
However, login sessions expire after two weeks, so at some point you
will get an error message saying that you are no longer logged in and
need to authenticate. To do so, run
.PP
.sh gsc auth <\fIUSERNAME\fR>
.PP
where <\fIUSERNAME\fR> is your username that you created with the
.B "gsc create"
command.
(If you're a student, it should be your Northwestern NetID.)
.\"
.SS "Submitting your files"
To submit your homework, you need to upload any files that you modified
from the original starter code. To upload one or more files
<\fIFILE\fR>\fI...\fR to Homework <\fIN\fR>, run
.PP
.sh gsc cp <\fIFILE\fR>\fI...\fR hw<\fIN\fR>:
.PP
For example, to upload files \fIbees.txt\fR and \fIwasps.txt\fR to
Homework 3, you would run
.PP
.sh gsc cp bees.txt wasps.txt hw3:
.PP
Or to upload all \fI.c\fR files in both the \fIsrc\fR and \fItest\fR
directories to Homework 1, run
.PP
.sh gsc cp src/*.c test/*.c hw1:
.PP
Be careful with this command, because uploading a file with the same
name as a file already on the server will replace it without warning.
.\"
.SS "Viewing your submission"
Once you have uploaded your files, you should check to make sure that
your upload was successful. To list the files in Homework <\fIN\fR>,
run the command
.PP
.sh gsc ls hw<\fIN\fR>:
.PP
To see the contents of all files submitted for that same homework, run
the command
.PP
.sh gsc cat -a hw\<\fIN\fR>:
.PP
If that produces too much output to fit on the screen, you can page
through it by piping the output to the
.BR less (1)
command. For example, to see all the files submitted to Homework 1, one
screen at a time, run
.PP
.sh gsc cat -a hw1: | less
.\"
.SS "Testing your submission"
It's also a good idea to confirm that you've submitted the correct
set of files, and in particular, that your submitted files work when
combined with the starter code. This will make it more likely, though by
no means guaranteed, that your code will compile and run properly when
the grading tests are run on it.
One way to do this is to re-download the
starter code into
a temporary location, then download your submission on top of it, and
then test it.
.PP
Suppose you want to check your Homework 1 submission. You should create
a temporary directory for doing this check in, so that you don't
accidentally overwrite your actual work. So start by creating a
directory, changing into it, and downloading the starter code
thereto:
.PP
.sh mkdir check
.sh cd check
.sh curl $URL211/hw/hw01.tgz | tar zxk
.PP
(Note that giving the \fIk\fR option to
.BR tar (1)
prevents it from overwriting existing files, such as your homework
solution.)
.PP
You should now have a directory \fIhw01\fR containing the Homework 1
starter code.
Next, download your Homework 1 submission on top of that starter
code:
.PP
.sh gsc cp -af hw1: hw01
.PP
Finally, try building and testing it:
.PP
.sh make -C hw01 all
.sh hw01/build/overlapped
.PP
When you're done, clean up by changing back out of the temporary
directory and removing it along with all of its contents:
.PP
.sh cd ..
.sh rm -R check
.\"
.SH "SEE ALSO"
The full documentation for
.BR gsc (1)
is in its own manual page.
.PP
You may also find useful the manual pages for
.BR curl (1),
.BR less (1),
.BR make (1),
.BR mkdir (1),
.BR rm (1),
.BR tar (1),
and
.BR tcsh (1)
(for the ``cd'' command).
